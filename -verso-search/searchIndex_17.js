window.docContents[17].resolve({"/Type-Classes/#decidable-propositions":{"id":"/Type-Classes/#decidable-propositions","header":"10.8. Decidable Propositions","context":"Theorem Proving in Lean 4\u0009Type Classes","contents":"Let us consider another example of a type class defined in the\nstandard library, namely the type class of Decidable\n\npropositions. Roughly speaking, an element of Prop\n is said to be\ndecidable if we can decide whether it is true or false. The\ndistinction is only useful in constructive mathematics; classically,\nevery proposition is decidable. But if we use the classical principle,\nsay, to define a function by cases, that function will not be\ncomputable. Algorithmically speaking, the Decidable\n type class can\nbe used to infer a procedure that effectively determines whether or\nnot the proposition is true. As a result, the type class supports such\ncomputational definitions when they are possible while at the same\ntime allowing a smooth transition to the use of classical definitions\nand classical reasoning.\n\nIn the standard library, Decidable\n is defined formally as follows:\n\n\n\nLogically speaking, having an element t : Decidable p is stronger\nthan having an element t' : p ∨ ¬p\n; it enables us to define values\nof an arbitrary type depending on the truth value of p\n. For\nexample, for the expression if p then a else b\n to make sense, we\nneed to know that p\n is decidable. That expression is syntactic\nsugar for ite p a b\n, where ite\n is defined as follows:\n\n\n\nThe standard library also contains a variant of ite called\ndite, the dependent if-then-else expression. It is defined as\nfollows:\n\nThat is, in dite c t e\n, we can assume hc : c in the “then”\nbranch, and hnc : ¬c in the “else” branch. To make dite\n more\nconvenient to use, Lean allows us to write if h : c then t else e\ninstead of dite c (fun h : c => t h) (fun h : ¬c => e h)\n.\n\nWithout classical logic, we cannot prove that every proposition is\ndecidable. But we can prove that certain propositions are\ndecidable. For example, we can prove the decidability of basic\noperations like equality and comparisons on the natural numbers and\nthe integers. Moreover, decidability is preserved under propositional\nconnectives:\n\n\n\nThus we can carry out definitions by cases on decidable predicates on\nthe natural numbers:\n\n\n\nTurning on implicit arguments shows that the elaborator has inferred\nthe decidability of the proposition x < a ∨ x > b, simply by\napplying appropriate instances.\n\nWith the classical axioms, we can prove that every proposition is\ndecidable. You can import the classical axioms and make the generic\ninstance of decidability available by opening the Classical namespace.\n\n\n\nThereafter Decidable p\n has an instance for every p.\nThus all theorems in the library\nthat rely on decidability assumptions are freely available when you\nwant to reason classically. In Axioms and Computation,\nwe will see that using the law of the\nexcluded middle to define functions can prevent them from being used\ncomputationally. Thus, the standard library assigns a low priority to\nthe propDecidable\n instance.\n\n\n\nThis guarantees that Lean will favor other instances and fall back on\npropDecidable only after other attempts to infer decidability have\nfailed.\n\nThe Decidable\n type class also provides a bit of small-scale\nautomation for proving theorems. The standard library introduces the\ntactic decide that uses the Decidable\n instance to solve simple goals,\nas well as a function decide that uses a Decidable\n instance to compute the\ncorresponding Bool\n.\n\n\n\nThey work as follows. The expression decide p\n tries to infer a\ndecision procedure for p, and, if it is successful, evaluates to\neither true\n or false\n. In particular, if p is a true closed\nexpression, decide p will reduce definitionally to the Boolean true\n.\nOn the assumption that decide p = true\n holds, of_decide_eq_true\n\nproduces a proof of p\n. The tactic decide puts it all together to\nprove a target p\n. By the previous observations,\ndecide will succeed any time the inferred decision procedure\n for p\n has enough information to evaluate, definitionally, to the isTrue\n case.\n\n"}});