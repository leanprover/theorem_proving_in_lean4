window.docContents[226].resolve({"/Interacting-with-Lean/#sugar-for-simple-functions":{"contents":"Lean includes a notation for describing simple functions using anonymous\nplaceholders rather than fun. When · occurs as part of a term,\nthe nearest enclosing parentheses become a function with the · as its argument.\nIf the parentheses include multiple placeholders without other intervening parentheses,\nthen they are made into arguments from left to right. Here are a few examples:\n\n\n\nNested parentheses introduce new functions. In the following example, two different lambda expressions are created:\n\n\n\n","context":"Theorem Proving in Lean 4\u0009Interacting with Lean","header":"6.14. Sugar for Simple Functions","id":"/Interacting-with-Lean/#sugar-for-simple-functions"},"/The-Conversion-Tactic-Mode/#conv":{"contents":"Inside a tactic block, one can use the keyword conv to enter\nconversion mode. This mode allows to travel inside assumptions and\ngoals, even inside function abstractions and dependent arrows, to apply rewriting or\nsimplifying steps.\n\n\n\n\n\n\n\n\n\n","context":"Theorem Proving in Lean 4","header":"11. The Conversion Tactic Mode","id":"/The-Conversion-Tactic-Mode/#conv"}});