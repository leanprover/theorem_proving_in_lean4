window.docContents[7].resolve({"/Structures-and-Records/#structures-and-records":{"id":"/Structures-and-Records/#structures-and-records","header":"9. Structures and Records","context":"Theorem Proving in Lean 4","contents":"We have seen that Lean's foundational system includes inductive\ntypes. We have, moreover, noted that it is a remarkable fact that it\nis possible to construct a substantial edifice of mathematics based on\nnothing more than the type universes, dependent arrow types, and inductive types;\neverything else follows from those. The Lean standard library contains\nmany instances of inductive types (e.g., Nat\n, Prod\n, List\n),\nand even the logical connectives are defined using inductive types.\n\nRecall that a non-recursive inductive type that contains only one\nconstructor is called a structure or record. The product type is a\nstructure, as is the dependent product (Sigma) type.\nIn general, whenever we define a structure S, we usually\ndefine projection functions that allow us to “destruct” each\ninstance of S and retrieve the values that are stored in its\nfields. The functions Prod.fst\n and Prod.snd\n, which return the\nfirst and second elements of a pair, are examples of such projections.\n\nWhen writing programs or formalizing mathematics, it is not uncommon\nto define structures containing many fields. The structure\ncommand, available in Lean, provides infrastructure to support this\nprocess. When we define a structure using this command, Lean\nautomatically generates all the projection functions. The\nstructure command also allows us to define new structures based on\npreviously defined ones. Moreover, Lean provides convenient notation\nfor defining instances of a given structure.\n\n\n\n\n\n\n\n"}});