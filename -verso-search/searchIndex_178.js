window.docContents[178].resolve({"/Inductive-Types/#Theorem-Proving-in-Lean-4--Inductive-Types--Exercises":{"id":"/Inductive-Types/#Theorem-Proving-in-Lean-4--Inductive-Types--Exercises","header":"7.10. Exercises","context":"Theorem Proving in Lean 4\u0009Inductive Types","contents":"\n\n1. Try defining other operations on the natural numbers, such as\n   multiplication, the predecessor function (with pred 0 = 0\n),\n   truncated subtraction (with n - m = 0\n when m\n is greater\n   than or equal to n\n), and exponentiation. Then try proving some\n   of their basic properties, building on the theorems we have already\n   proved.Since many of these are already defined in Lean's core library, you\n   should work within a namespace named Hidden, or something like\n   that, in order to avoid name clashes.2. Define some operations on lists, like a length\n function or the\n   reverse\n function. Prove some properties, such as the following:a. length (xs ++ ys) = length xs + length ys\nb. length (reverse xs) = length xs\nc. reverse (reverse xs) = xs\n3. Define an inductive data type consisting of terms built up from the following constructors:* const n\n, a constant denoting the natural number n\n* var n\n, a variable, numbered n\n* plus s t\n, denoting the sum of s and t* times s t\n, denoting the product of s and tRecursively define a function that evaluates any such term with respect to an assignment of values to the variables.4. Similarly, define the type of propositional formulas, as well as\n   functions on the type of such formulas: an evaluation function,\n   functions that measure the complexity of a formula, and a function\n   that substitutes another formula for a given variable.\n\n\n"}});