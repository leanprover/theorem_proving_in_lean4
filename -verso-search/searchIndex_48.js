window.docContents[48].resolve({"/Type-Classes/#output-parameters":{"contents":"By default, Lean only tries to synthesize an instance Inhabited T\n when the term T\n is known and does not\ncontain missing parts. The following command produces the error\ntypeclass instance problem is stuck, it is often due to metavariables because the type has a missing part (i.e., the _).\n\n\n\nYou can view the parameter of the type class Inhabited\n as an input value for the type class synthesizer.\nWhen a type class has multiple parameters, you can mark some of them as output parameters.\nLean will start type class synthesizer even when these parameters have missing parts.\nIn the following example, we use output parameters to define a heterogeneous polymorphic\nmultiplication.\n\n\n\nThe parameters α and β are considered input parameters and γ an output one.\nGiven an application hMul a b, after the types of a and b are known, the type class\nsynthesizer is invoked, and the resulting type is obtained from the output parameter γ.\nIn the example above, we defined two instances. The first one is the homogeneous\nmultiplication for natural numbers. The second is the scalar multiplication for arrays.\nNote that you chain instances and generalize the second instance.\n\n\n\nYou can use our new scalar array multiplication instance on arrays of type Array β\nwith a scalar of type α whenever you have an instance HMul α β γ.\nIn the last #eval, note that the instance was used twice on an array of arrays.\n\nOutput parameters are ignored during instance synthesis. Even when instance synthesis occurs in a\ncontext in which the values of output parameters are already determined, their values are ignored.\nOnce an instance is found using its input parameters, Lean ensures that the already-known values of\nthe output parameters match those which were found.\n\nLean also features semi-output parameters, which have some features of input parameters\nand some features of output parameters. Like input parameters, semi-output parameters are considered\nwhen selecting instances. Like output parameters, they can be used to instantiate unknown values.\nHowever, they do not do so uniquely. Instance synthesis with semi-output parameters can be more difficult\nto predict, because the order in which instances are considered can determine which is selected, but it is\nalso more flexible.\n\n","context":"Theorem Proving in Lean 4\u0009Type Classes","header":"10.4. Output Parameters","id":"/Type-Classes/#output-parameters"}});