window.docContents[216].resolve({"/Propositions-and-Proofs/#introducing-auxiliary-subgoals":{"id":"/Propositions-and-Proofs/#introducing-auxiliary-subgoals","header":"3.4. Introducing Auxiliary Subgoals","context":"Theorem Proving in Lean 4\u0009Propositions and Proofs","contents":"This is a good place to introduce another device Lean offers to help\nstructure long proofs, namely, the have construct, which\nintroduces an auxiliary subgoal in a proof. Here is a small example,\nadapted from the last section:\n\n\n\nInternally, the expression have h : p := s; t\n produces the term\n(fun (h : p) => t) s\n. In other words, s\n is a proof of p\n,\nt\n is a proof of the desired conclusion assuming h : p, and the\ntwo are combined by a lambda abstraction and application. This simple\ndevice is extremely useful when it comes to structuring long proofs,\nsince we can use intermediate have's as stepping stones leading to\nthe final goal.\n\nLean also supports a structured way of reasoning backwards from a\ngoal, which models the “suffices to show” construction in ordinary\nmathematics. The next example simply permutes the last two lines in\nthe previous proof.\n\n\n\nWriting suffices hq : q leaves us with two goals. First, we have\nto show that it indeed suffices to show q\n, by proving the original\ngoal of q ∧ p with the additional hypothesis hq : q. Finally,\nwe have to show q.\n\n"}});