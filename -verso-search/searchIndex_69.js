window.docContents[69].resolve({"/Interacting-with-Lean/#using-the-library":{"id":"/Interacting-with-Lean/#using-the-library","header":"6.11. Using the Library","context":"Theorem Proving in Lean 4\u0009Interacting with Lean","contents":"To use Lean effectively you will inevitably need to make use of\ndefinitions and theorems in the library. Recall that the import\ncommand at the beginning of a file imports previously compiled results\nfrom other files, and that importing is transitive; if you import\nFoo and Foo imports Bar, then the definitions and theorems\nfrom Bar are available to you as well. But the act of opening a\nnamespace, which provides shorter names, does not carry over. In each\nfile, you need to open the namespaces you wish to use.\n\nIn general, it is important for you to be familiar with the library\nand its contents, so you know what theorems, definitions, notations,\nand resources are available to you. Below we will see that Lean's\neditor modes can also help you find things you need, but studying the\ncontents of the library directly is often unavoidable. Lean's standard\nlibrary can be found online, on GitHub:\n\n* https://github.com/leanprover/lean4/tree/master/src/Init* https://github.com/leanprover/lean4/tree/master/src/Std\n\nYou can see the contents of these directories and files using GitHub's\nbrowser interface. If you have installed Lean on your own computer,\nyou can find the library in the lean folder, and explore it with\nyour file manager. Comment headers at the top of each file provide\nadditional information.\n\nLean's library developers follow general naming guidelines to make it\neasier to guess the name of a theorem you need, or to find it using\ntab completion in editors with a Lean mode that supports this, which\nis discussed in the next section. Identifiers are generally\ncamelCase, and types are CamelCase. For theorem names,\nwe rely on descriptive names where the different components are separated\nby _s. Often the name of theorem simply describes the conclusion:\n\n\n\nRemember that identifiers in Lean can be organized into hierarchical\nnamespaces. For example, the theorem named le_of_succ_le_succ\n in the\nnamespace Nat has full name Nat.le_of_succ_le_succ\n, but the shorter\nname is made available by the command open Nat (for names not marked as\nprotected). We will see in the chapters on inductive types\nand structures and records\nthat defining structures and inductive data types in Lean generates\nassociated operations, and these are stored in\na namespace with the same name as the type under definition. For\nexample, the product type comes with the following operations:\n\n\n\nThe first is used to construct a pair, whereas the next two,\nProd.fst and Prod.snd, project the two elements. The last,\nProd.rec, provides another mechanism for defining functions on a\nproduct in terms of a function on the two components. Names like\nProd.rec are protected, which means that one has to use the full\nname even when the Prod namespace is open.\n\nWith the propositions as types correspondence, logical connectives are\nalso instances of inductive types, and so we tend to use dot notation\nfor them as well:\n\n\n\n"}});