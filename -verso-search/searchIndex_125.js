window.docContents[125].resolve({"/Axioms-and-Computation/#choice":{"contents":"To state the final axiom defined in the standard library, we need the\nNonempty type, which is defined as follows:\n\nBecause Nonempty α\n has type Prop\n and its constructor contains data, it can only eliminate to Prop\n.\nIn fact, Nonempty α\n is equivalent to ∃ x : α, True\n:\n\n\n\nOur axiom of choice is now expressed simply as follows:\n\n\n\nGiven only the assertion h\n that α\n is nonempty, choice h\n\nmagically produces an element of α\n. Of course, this blocks any\nmeaningful computation: by the interpretation of Prop\n, h\n\ncontains no information at all as to how to find such an element.\n\nThis is found in the Classical namespace, so the full name of the\ntheorem is Classical.choice\n. The choice principle is equivalent to\nthe principle of indefinite description, which can be expressed with\nsubtypes as follows:\n\n\n\nBecause it depends on choice\n, Lean cannot generate executable code for\nindefiniteDescription\n, and so requires us to mark the definition\nas noncomputable. Also in the Classical namespace, the\nfunction choose\n and the property choose_spec\n decompose the two\nparts of the output of indefiniteDescription\n:The choice\n principle also erases the distinction between the\nproperty of being Nonempty\n and the more constructive property of\nbeing Inhabited\n:\n\nIn the next section, we will see that propext\n, funext\n, and\nchoice, taken together, imply the law of the excluded middle and\nthe decidability of all propositions. Using those, one can strengthen\nthe principle of indefinite description as follows:\n\nAssuming the ambient type α is nonempty,\nstrongIndefiniteDescription p produces an element of α\nsatisfying p if there is one. The data component of this\ndefinition is conventionally known as Hilbert's epsilon function:\n\n","context":"Theorem Proving in Lean 4\u0009Axioms and Computation","header":"12.5. Choice","id":"/Axioms-and-Computation/#choice"}});