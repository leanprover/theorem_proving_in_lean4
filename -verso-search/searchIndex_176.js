window.docContents[176].resolve({"/Inductive-Types/#inductive-families":{"contents":"We are almost done describing the full range of inductive definitions\naccepted by Lean. So far, you have seen that Lean allows you to\nintroduce inductive types with any number of recursive\nconstructors. In fact, a single inductive definition can introduce an\nindexed family of inductive types, in a manner we now describe.\n\nAn inductive family is an indexed family of types defined by a\nsimultaneous induction of the following form:\n\ninductive foo : ... → Sort u where\n  | constructor₁ : ... → foo ...\n  | constructor₂ : ... → foo ...\n  ...\n  | constructorₙ : ... → foo ...\n\n\nIn contrast to an ordinary inductive definition, which constructs an\nelement of some Sort u, the more general version constructs a\nfunction ... → Sort u\n, where “...” denotes a sequence of\nargument types, also known as indices. Each constructor then\nconstructs an element of some member of the family. One example is the\ndefinition of Vect α n, the type of vectors of elements of α\nof length n:\n\nNotice that the cons constructor takes an element of\nVect α n and returns an element of Vect α (n + 1), thereby using an\nelement of one member of the family to build an element of another.\n\nA more exotic example is given by the definition of the equality type in Lean:\n\n\n\nFor each fixed α : Sort u and a : α, this definition\nconstructs a family of types Eq a x\n, indexed by x : α.\nNotably, however, there is only one constructor, refl, which\nis an element of Eq a a.\nIntuitively, the only way to construct a proof of Eq a x\n\nis to use reflexivity, in the case where x\n is a\n.\nNote that Eq a a\n is the only inhabited type in the family of types\nEq a x\n. The elimination principle generated by Lean is as follows:\n\n\n\nIt is a remarkable fact that all the basic axioms for equality follow\nfrom the constructor, refl, and the eliminator, Eq.rec. The\ndefinition of equality is atypical, however; see the discussion in Axiomatic Details.\n\nThe recursor Eq.rec is also used to define substitution:\n\n\n\nYou can also define subst using match.\n\n\n\nActually, Lean compiles the match expressions using a definition based on generated helpers\nsuch as Eq.casesOn and Eq.ndrec, which are themselves defined using Eq.rec.\n\n\n\nUsing the recursor or match with h₁ : a = b, we may assume a and b are the same,\nin which case, p b and p a are the same.\n\nIt is not hard to prove that Eq is symmetric and transitive.\nIn the following example, we prove symm and leave as exercises the theorems trans and congr (congruence).\n\nIn the type theory literature, there are further generalizations of\ninductive definitions, for example, the principles of\ninduction-recursion and induction-induction. These are not\nsupported by Lean.\n\n","context":"Theorem Proving in Lean 4\u0009Inductive Types","header":"7.7. Inductive Families","id":"/Inductive-Types/#inductive-families"}});