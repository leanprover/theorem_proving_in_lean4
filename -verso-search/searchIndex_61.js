window.docContents[61].resolve({"/Dependent-Type-Theory/#variables-and-sections":{"contents":"Consider the following three function definitions:\n\n\n\nLean provides you with the variable command to make such\ndeclarations look more compact:\n\n\n\nYou can declare variables of any type, not just Type\n itself:\n\n\n\nPrinting them out shows that all three groups of definitions have\nexactly the same effect.\n\nThe variable command instructs Lean to insert the declared\nvariables as bound variables in definitions that refer to them by\nname. Lean is smart enough to figure out which variables are used\nexplicitly or implicitly in a definition. You can therefore proceed as\nthough α, β, γ, g, f, h, and x are fixed\nobjects when you write your definitions, and let Lean abstract the\ndefinitions for you automatically.\n\nWhen declared in this way, a variable stays in scope until the end of\nthe file you are working on. Sometimes, however, it is useful to limit\nthe scope of a variable. For that purpose, Lean provides the notion of\na section:\n\n\n\nWhen the section is closed, the variables go out of scope, and cannot\nbe referenced any more.\n\nYou do not have to indent the lines within a section. Nor do you have\nto name a section, which is to say, you can use an anonymous\nsection / end pair. If you do name a section, however, you\nhave to close it using the same name. Sections can also be nested,\nwhich allows you to declare new variables incrementally.\n\n","context":"Theorem Proving in Lean 4\u0009Dependent Type Theory","header":"2.6. Variables and Sections","id":"/Dependent-Type-Theory/#variables-and-sections"}});