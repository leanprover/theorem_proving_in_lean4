window.docContents[231].resolve({"/Interacting-with-Lean/#messages":{"id":"/Interacting-with-Lean/#messages","header":"6.1. Messages","context":"Theorem Proving in Lean 4\u0009Interacting with Lean","contents":"Lean produces three kinds of messages:\n\n Errors\n\nErrors are produced when an inconsistency in the code means that it can't\n  be processed. Examples include syntax errors (e.g. a missing )) and type\n  errors such as attempting to add a natural number to a function.\n\n Warnings\n\nWarnings describe potential problems with the code, such as the presence of sorry\n.\n  Unlike with errors, the code is not meaningless; however, warnings deserve careful attention.\n\n Information\n\nInformation doesn't indicate any problem with the code, and includes output from commands such as #check and #eval.\n\n\n\nLean can check that a command produces the expected messages. If the messages match,\nthen any errors are disregarded; this can be used to ensure that the right errors occur.\nIf they don't, an error is produced. You can use the #guard_msgs command to indicate\nwhich messages are expected.\n\nHere is an example:\n\n\n\nIncluding a message category in parentheses after #guard_msgs causes it to check only\nthe specified category, letting others through. In this example, #eval issues an error\ndue to the presence of sorry\n, but the warning that is always issued for sorry\n is displayed\nas usual:\n\nWithout the configuration, both messages are captured:\n\n\n\nSome examples in this book use #guard_msgs to indicate expected errors.\n\n"}});