window.docContents[190].resolve({"/Inductive-Types/#other-recursive-data-types":{"contents":"Let us consider some more examples of inductively defined types. For\nany type, α, the type List α of lists of elements of α is\ndefined in the library.A list of elements of type α is either the empty list, nil, or\nan element h : α followed by a list t : List α.\nThe first element, h, is commonly known as the “head” of the list,\nand the remainder, t, is known as the “tail.”\n\nAs an exercise, prove the following:\n\n\n\nTry also defining the function length : {α : Type u} → List α → Nat that returns the length of a list,\nand prove that it behaves as expected (for example, length (append as bs) = length as + length bs\n).\n\nFor another example, we can define the type of binary trees:\n\n\n\nIn fact, we can even define the type of countably branching trees:\n\n\n\n","context":"Theorem Proving in Lean 4\u0009Inductive Types","header":"7.5. Other Recursive Data Types","id":"/Inductive-Types/#other-recursive-data-types"}});