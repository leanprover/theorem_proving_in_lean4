window.docContents[28].resolve({"/Propositions-and-Proofs/#examples-of-propositional-validities":{"contents":"Lean's standard library contains proofs of many valid statements of\npropositional logic, all of which you are free to use in proofs of\nyour own. The following list includes a number of common identities.Commutativity:1. p ∧ q ↔ q ∧ p\n2. p ∨ q ↔ q ∨ p\nAssociativity:3. (p ∧ q) ∧ r ↔ p ∧ (q ∧ r)\n4. (p ∨ q) ∨ r ↔ p ∨ (q ∨ r)\nDistributivity:5. p ∧ (q ∨ r) ↔ (p ∧ q) ∨ (p ∧ r)\n6. p ∨ (q ∧ r) ↔ (p ∨ q) ∧ (p ∨ r)\nOther properties:7. (p → (q → r)) ↔ (p ∧ q → r)\n8. ((p ∨ q) → r) ↔ (p → r) ∧ (q → r)\n9. ¬(p ∨ q) ↔ ¬p ∧ ¬q\n10. ¬p ∨ ¬q → ¬(p ∧ q)\n11. ¬(p ∧ ¬p)\n12. p ∧ ¬q → ¬(p → q)\n13. ¬p → (p → q)\n14. (¬p ∨ q) → (p → q)\n15. p ∨ False ↔ p\n16. p ∧ False ↔ False\n17. ¬(p ↔ ¬p)\n18. (p → q) → (¬q → ¬p)\nThese require classical reasoning:19. (p → r ∨ s) → ((p → r) ∨ (p → s))\n20. ¬(p ∧ q) → ¬p ∨ ¬q\n21. ¬(p → q) → p ∧ ¬q\n22. (p → q) → (¬p ∨ q)\n23. (¬q → ¬p) → (p → q)\n24. p ∨ ¬p\n25. (((p → q) → p) → p)\nThe sorry\n identifier magically produces a proof of anything, or\nprovides an object of any data type at all. Of course, it is unsound\nas a proof method—for example, you can use it to prove False\n—and\nLean produces severe warnings when files use or import theorems\nwhich depend on it. But it is very useful for building long proofs\nincrementally. Start writing the proof from the top down, using\nsorry\n to fill in subproofs. Make sure Lean accepts the term with\nall the sorry\n's; if not, there are errors that you need to\ncorrect. Then go back and replace each sorry\n with an actual proof,\nuntil no more remain.Here is another useful trick. Instead of using sorry\n, you can use\nan underscore _ as a placeholder. Recall this tells Lean that\nthe argument is implicit, and should be filled in automatically. If\nLean tries to do so and fails, it returns with an error message “don't\nknow how to synthesize placeholder,” followed by the type of\nthe term it is expecting, and all the objects and hypotheses available\nin the context. In other words, for each unresolved placeholder, Lean\nreports the subgoal that needs to be filled at that point. You can\nthen construct a proof by incrementally filling in these placeholders.\n\nFor reference, here are two sample proofs of validities taken from the\nlist above.\n\n\n\n","context":"Theorem Proving in Lean 4\u0009Propositions and Proofs","header":"3.6. Examples of Propositional Validities","id":"/Propositions-and-Proofs/#examples-of-propositional-validities"}});