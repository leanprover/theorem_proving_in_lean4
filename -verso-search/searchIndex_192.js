window.docContents[192].resolve({"/Induction-and-Recursion/#Theorem-Proving-in-Lean-4--Induction-and-Recursion--Exercises":{"contents":"\n\n1. Open a namespace Hidden to avoid naming conflicts, and use the\n   equation compiler to define addition, multiplication, and\n   exponentiation on the natural numbers. Then use the equation\n   compiler to derive some of their basic properties.2. Similarly, use the equation compiler to define some basic\n   operations on lists (like the reverse\n function) and prove\n   theorems about lists by induction (such as the fact that\n   reverse (reverse xs) = xs\n for any list xs\n).3. Define your own function to carry out course-of-value recursion on\n   the natural numbers. Similarly, see if you can figure out how to\n   define WellFounded.fix on your own.4. Following the examples in the section on dependent pattern matching,\n   define a function that will append two vectors.\n   This is tricky; you will have to define an auxiliary function.5. Consider the following type of arithmetic expressions. The idea is\n    that var n\n is a variable, vₙ, and const n\n is the\n    constant whose value is n\n.Here sampleExpr represents (v₀ * 7) + (2 * v₁).Write a function that evaluates such an expression, evaluating each var n to v n.Implement “constant fusion,” a procedure that simplifies subterms like\n    5 + 7\n to 12\n. Using the auxiliary function simpConst,\n    define a function “fuse”: to simplify a plus or a times, first\n    simplify the arguments recursively, and then apply simpConst to\n    try to simplify the result.The last two theorems show that the definitions preserve the value.\n\n\n","context":"Theorem Proving in Lean 4\u0009Induction and Recursion","header":"8.11. Exercises","id":"/Induction-and-Recursion/#Theorem-Proving-in-Lean-4--Induction-and-Recursion--Exercises"}});