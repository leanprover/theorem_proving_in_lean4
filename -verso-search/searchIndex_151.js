window.docContents[151].resolve({"/Tactics/#extensible-tactics":{"id":"/Tactics/#extensible-tactics","header":"5.9. Extensible Tactics","context":"Theorem Proving in Lean 4\u0009Tactics","contents":"In the following example, we define the notation triv using the command syntax.\nThen, we use the command macro_rules to specify what should\nbe done when triv is used. You can provide different expansions, and the tactic\ninterpreter will try all of them until one succeeds:\n\n"},"/Interacting-with-Lean/#named-arguments":{"id":"/Interacting-with-Lean/#named-arguments","header":"6.15. Named Arguments","context":"Theorem Proving in Lean 4\u0009Interacting with Lean","contents":"Named arguments enable you to specify an argument for a parameter by\nmatching the argument with its name rather than with its position in\nthe parameter list.  If you don't remember the order of the parameters\nbut know their names, you can send the arguments in any order. You may\nalso provide the value for an implicit parameter when Lean failed to\ninfer it. Named arguments also improve the readability of your code by\nidentifying what each argument represents.\n\n\n\nIn the following examples, we illustrate the interaction between named\nand default arguments.\n\n\n\nYou can use .. to provide missing explicit arguments as _.\nThis feature combined with named arguments is useful for writing patterns. Here is an example:\n\n\n\nEllipses are also useful when explicit arguments can be automatically\ninferred by Lean, and we want to avoid a sequence of _s.\n\n\n\n"}});