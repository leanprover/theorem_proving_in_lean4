window.docContents[169].resolve({"/Induction-and-Recursion/#induction-and-recursion":{"id":"/Induction-and-Recursion/#induction-and-recursion","header":"8. Induction and Recursion","context":"Theorem Proving in Lean 4","contents":"In the previous chapter, we saw that inductive definitions provide a\npowerful means of introducing new types in Lean. Moreover, the\nconstructors and the recursors provide the only means of defining\nfunctions on these types. By the propositions-as-types correspondence,\nthis means that induction is the fundamental method of proof.\n\nLean provides natural ways of defining recursive functions, performing\npattern matching, and writing inductive proofs. It allows you to\ndefine a function by specifying equations that it should satisfy, and\nit allows you to prove a theorem by specifying how to handle various\ncases that can arise. Behind the scenes, these descriptions are\n“compiled” down to primitive recursors, using a procedure that we\nrefer to as the “equation compiler.” The equation compiler is not part\nof the trusted code base; its output consists of terms that are\nchecked independently by the kernel.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}});