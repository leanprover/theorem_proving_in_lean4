window.docContents[175].resolve({"/Dependent-Type-Theory/#namespaces":{"id":"/Dependent-Type-Theory/#namespaces","header":"2.7. Namespaces","context":"Theorem Proving in Lean 4\u0009Dependent Type Theory","contents":"Lean provides you with the ability to group definitions into nested,\nhierarchical namespaces:\n\n\n\nWhen you declare that you are working in the namespace Foo, every\nidentifier you declare has a full name with prefix “Foo.”. Within\nthe namespace, you can refer to identifiers by their shorter names,\nbut once you end the namespace, you have to use the longer names.\nUnlike section, namespaces require a name. There is only one\nanonymous namespace at the root level.\n\nThe open command brings the shorter names into the current\ncontext. Often, when you import a module, you will want to open one or\nmore of the namespaces it contains, to have access to the short\nidentifiers. But sometimes you will want to leave this information\nprotected by a fully qualified name, for example, when they conflict\nwith identifiers in another namespace you want to use. Thus namespaces\ngive you a way to manage names in your working environment.\n\nFor example, Lean groups definitions and theorems involving lists into\na namespace List.\n\n\n\nThe command open List allows you to use the shorter names:\n\nLike sections, namespaces can be nested:\n\n\n\nNamespaces that have been closed can later be reopened, even in another file:\n\n\n\nLike sections, nested namespaces have to be closed in the order they\nare opened. Namespaces and sections serve different purposes:\nnamespaces organize data and sections declare variables for insertion\nin definitions. Sections are also useful for delimiting the scope of\ncommands such as set_option and open.\n\nIn many respects, however, a namespace ... end block behaves the\nsame as a section ... end block. In particular, if you use the\nvariable command within a namespace, its scope is limited to the\nnamespace. Similarly, if you use an open command within a\nnamespace, its effects disappear when the namespace is closed.\n\n"}});