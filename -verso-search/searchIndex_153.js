window.docContents[153].resolve({"/Interacting-with-Lean/#more-on-namespaces":{"id":"/Interacting-with-Lean/#more-on-namespaces","header":"6.4. More on Namespaces","context":"Theorem Proving in Lean 4\u0009Interacting with Lean","contents":"In Lean, identifiers are given by hierarchical names like\nFoo.Bar.baz. We saw in Namespaces that Lean provides\nmechanisms for working with hierarchical names. The command\nnamespace Foo causes Foo to be prepended to the name of each\ndefinition and theorem until end Foo is encountered. The command\nopen Foo then creates temporary aliases to definitions and\ntheorems that begin with prefix Foo.\n\n\n\nThe following definition\n\n\n\nis treated as a macro, and expands to\n\n\n\nAlthough the names of theorems and definitions have to be unique, the\naliases that identify them do not. When we open a namespace, an\nidentifier may be ambiguous. Lean tries to use type information to\ndisambiguate the meaning in context, but you can always disambiguate\nby giving the full name. To that end, the string _root_ is an\nexplicit description of the empty prefix.\n\n\n\nWe can prevent the shorter alias from being created by using the protected keyword:\n\n\n\nThis is often used for names like Nat.rec and Nat.recOn, to prevent\noverloading of common names.\n\nThe open command admits variations. The command\n\n\n\ncreates aliases for only the identifiers listed. The command\n\n\n\ncreates aliases for everything in the Nat namespace except the identifiers listed.\n\n\n\ncreates aliases renaming Nat.mul\n to times and Nat.add\n to plus.\n\nIt is sometimes useful to export aliases from one namespace to another, or to the top level. The command\n\n\n\ncreates aliases for succ, add, and sub in the current\nnamespace, so that whenever the namespace is open, these aliases are\navailable. If this command is used outside a namespace, the aliases\nare exported to the top level.\n\n"}});