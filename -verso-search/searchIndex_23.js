window.docContents[23].resolve({"/Tactics/#more-tactics":{"contents":"Some additional tactics are useful for constructing and destructing\npropositions and data. For example, when applied to a goal of the form\np ∨ q, you use tactics such as apply Or.inl and\napply Or.inr.  Conversely, the cases tactic can be used to decompose a\ndisjunction:\n\nNote that the syntax is similar to the one used in match expressions.\nThe new subgoals can be solved in any order:\n\n\n\nYou can also use a (unstructured) cases without the with and a tactic\nfor each alternative:\n\n\n\nThe (unstructured) cases is particularly useful when you can close several\nsubgoals using the same tactic:\n\n\n\nYou can also use the combinator tac1 <;> tac2 to apply tac2 to each\nsubgoal produced by tactic tac1:\n\n\n\nYou can combine the unstructured cases tactic with the case and . notation:\n\nThe cases tactic can also be used to\ndecompose a conjunction:\n\n\n\nIn this example, there is only one goal after the cases tactic is\napplied, with h : p ∧ q replaced by a pair of assumptions,\nhp : p and hq : q:\n\n\n\nThe constructor tactic applies the unique\nconstructor for conjunction, And.intro\n.\n\nWith these tactics, an\nexample from the previous section can be rewritten as follows:\n\n\n\nYou will see in Inductive Types that\nthese tactics are quite general. The cases tactic can be used to\ndecompose any element of an inductively defined type; constructor\nalways applies the first applicable constructor of an inductively defined type.\nFor example, you can use cases and constructor with an existential quantifier:\n\n\n\nHere, the constructor tactic leaves the first component of the\nexistential assertion, the value of x, implicit. It is represented\nby a metavariable, which should be instantiated later on. In the\nprevious example, the proper value of the metavariable is determined\nby the tactic exact px, since px has type p x. If you want\nto specify a witness to the existential quantifier explicitly, you can\nuse the exists tactic instead:\n\n\n\nHere is another example:\n\n\n\nThese tactics can be used on data just as well as propositions. In the\nnext example, they are used to define functions which swap the\ncomponents of the product and sum types:\n\n\n\nNote that up to the names we have chosen for the variables, the\ndefinitions are identical to the proofs of the analogous propositions\nfor conjunction and disjunction. The cases tactic will also do a\ncase distinction on a natural number:\n\n\n\nThe cases tactic, and its companion, the induction tactic, are discussed in greater detail in\nthe Tactics for Inductive Types section.\n\nThe contradiction tactic searches for a contradiction among the hypotheses of the current goal:\n\nYou can also use match in tactic blocks.\n\nYou can “combine” intro with match and write the previous examples as follows:\n\n","context":"Theorem Proving in Lean 4\u0009Tactics","header":"5.3. More Tactics","id":"/Tactics/#more-tactics"}});